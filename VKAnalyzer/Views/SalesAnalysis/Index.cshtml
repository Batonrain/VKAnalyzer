@model VKAnalyzer.Models.VKModels.VkAnalyseSalesModel

@{
    ViewBag.Title = "Когортный анализ";

    var selectList = new SelectList(
        new List<SelectListItem>
        {
            new SelectListItem {Text = "День", Value = "1", Selected = true,},
            new SelectListItem {Text = "Месяц", Value = "3"},
        }, "Value", "Text");
}


<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
@Scripts.Render("~/bundles/cohortanalyse")

<h2>Когортный анализ продаж</h2>

@using (Html.BeginForm("Analyse", "SalesAnalysis", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <hr />
    @Html.ValidationSummary()
    @Html.HiddenFor(x => x.AccountId)
    @Html.HiddenFor(x => x.ExcludeTargetGroup)
    @Html.HiddenFor(x => x.ClientId)
    <div class="form-group">
        @Html.Label("Велосипеды: 77390912", new { @class = "col-md-2 control-label" })
    </div>
    <div class="form-group">
        @Html.Label("Куркин: 70468135", new { @class = "col-md-2 control-label" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GroupId, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.GroupId, new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.AccountId, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <select id="AccountNames" name="AccountNames" class="form-control"></select>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ClientId, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <select id="Clients" name="Clients" class="form-control"></select>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.ExcludeTargetGroup, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <select id="TargetGroups" name="TargetGroups" class="form-control"></select>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Step, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.Step, selectList, null, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StartDate, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control", placeholder = "Выберите дату" })
            @Html.ValidationMessageFor(model => model.StartDate)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.EndDate, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control", placeholder = "Выберите дату" })
            @Html.ValidationMessageFor(model => model.EndDate)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ListOfBuyers, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.ListOfBuyers, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Анализировать" />
        </div>
    </div>
}

<script type="text/javascript">
    $(document).ready(function () {
        $(function () {
            $('#StartDate').datepicker({
                dateFormat: "dd.mm.yy"
            });
            $('#EndDate').datepicker({
                dateFormat: "dd.mm.yy"
            });
        });

        $(function () {
            disableAll();

            $.getJSON("/Vk/GetAccounts")
            .done(function (data) {
                $.each(data.response, function (index, value) {
                    var accountOption = $('<option>');
                    accountOption.attr('value', value.account_id)
                                 .text(value.account_name);

                    if (index === 0) {
                        $("#AccountId").attr("value", value.account_id);

                        // Получение клиентов для рекламного кабинета
                        getClients(value.account_id);
                    }

                    $('#AccountNames').append(accountOption);
                });

            });
        });

        $("#AccountNames").change(function () {
            $("#AccountId").attr("value", $(this).val());
           
            $("#TargetGroups").prop('disabled', true);
            $("#Clients").prop('disabled', true);

            getClients($(this).val());
        });

        $("#TargetGroups").change(function () {
            $("#ExcludeTargetGroup").attr("value", $(this).val());
        });
        $("#Clients").change(function () {
            $("#ClientId").attr("value", $(this).val());
        });

        function getClients(accountId) {
            $.getJSON("/Vk/GetClients", { accountId: accountId })
                .done(function (clients) {
                    $('#Clients').find('option').remove().end();

                    if (clients.error) {
                        $("#ClientId").attr("value", "");
                        // Получение групп ретаргета напрямую
                        getRetargets(accountId);
                    } else {
                        $.each(clients.response, function (cIndex, cValue) {
                            if (cIndex === 0) {
                                $("#ClientId").attr("value", cValue.id);

                                // Получение групп ретаргета напрямую
                                getRetargets(accountId, cValue.id);
                            }

                            var clientOption = $('<option>');
                            clientOption.attr('value', cValue.id)
                                       .text(cValue.name);

                            $('#Clients').append(clientOption);
                        });
                    }
                });
        }

        function getRetargets(accountId, clientId) {
            $.getJSON("/Vk/GetTargetGroups", { accountId: accountId, clientId: clientId })
                         .done(function (groups) {

                             $('#TargetGroups').find('option').remove().end();

                             $.each(groups.response, function (gIndex, gValue) {
                                 if (gIndex === 0) {
                                     $("#ExcludeTargetGroup").attr("value", gValue.id);
                                 }
                                 var groupOption = $('<option>');
                                 groupOption.attr('value', gValue.id)
                                            .text(gValue.name);
                                 $('#TargetGroups').append(groupOption);
                             });

                             var needToDisableClient = false;
                             if (!clientId)
                                 needToDisableClient = true;

                             enableAll(needToDisableClient);
                         });
        }

        function disableAll() {
            $("#AccountNames").prop('disabled', true);
            $("#TargetGroups").prop('disabled', true);
            $("#Clients").prop('disabled', true);
        }

        function enableAll(disableClient) {
            $("#AccountNames").prop('disabled', false);
            $("#TargetGroups").prop('disabled', false);
            $("#Clients").prop('disabled', disableClient);
        }
    });
</script>